4,5c4,6
< int testcmp(char **a, char **b) {
< 	return strcmp(*a, *b);
---
> int testcmp(char **a, char **b)
> {
>     return strcmp(*a, *b);
8,11c9,14
< DArray *create_words() {
< 	DArray *result = DArray_create(0, 5);
< 	char *words[] = {"asdfasdfd", "werwar", "13234", "asdfasfd", "oioj"};
< 	int i = 0;
---
> DArray *create_words()
> {
>     DArray *result = DArray_create(0, 5);
>     char *words[] = { "asdfasfd",
>         "werwar", "13234", "asdfasfd", "oioj" };
>     int i = 0;
13,16c16,20
< 	for (i = 0; i < 5; i++) {
< 		DArray_push(result, words[i]);
< 	}
< 	return result;
---
>     for (i = 0; i < 5; i++) {
>         DArray_push(result, words[i]);
>     }
> 
>     return result;
19,26c23,33
< int is_sorted(DArray *array) {
< 	int i = 0;
< 	for (i = 0; i <DArray_count(array) - 1; i++) {
< 		if (strcmp(DArray_get(array, i), DArray_get(array, i + 1))>0) {
< 			return 0;
< 		}
< 	}
< 	return 1;
---
> int is_sorted(DArray * array)
> {
>     int i = 0;
> 
>     for (i = 0; i < DArray_count(array) - 1; i++) {
>         if (strcmp(DArray_get(array, i), DArray_get(array, i + 1)) > 0) {
>             return 0;
>         }
>     }
> 
>     return 1;
29,37c36,49
< char *run_sort_test(int (*func) (DArray *, DArray_compare), const char *name) {
< 	DArray *words = create_words();
< 	mu_assert(!is_sorted(words), "Words should start not sorted");
< 	debug("--- TEsting %s sorting algorithm", name);
< 	int rc = func(words, (DArray_compare)testcmp);
< 	mu_assert(rc == 0, "sort failed");
< 	mu_assert(is_sorted(words), "didn't sort it");
< 	DArray_destroy(words);
< 	return NULL;
---
> char *run_sort_test(int (*func) (DArray *, DArray_compare),
>         const char *name)
> {
>     DArray *words = create_words();
>     mu_assert(!is_sorted(words), "Words should start not sorted.");
> 
>     debug("--- Testing %s sorting algorithm", name);
>     int rc = func(words, (DArray_compare) testcmp);
>     mu_assert(rc == 0, "sort failed");
>     mu_assert(is_sorted(words), "didn't sort it");
> 
>     DArray_destroy(words);
> 
>     return NULL;
40,41c52,54
< char *test_qsort() {
< 	return run_sort_test(DArray_qsort, "qsort");
---
> char *test_qsort()
> {
>     return run_sort_test(DArray_qsort, "qsort");
44,45c57,59
< char *test_heapsort() {
< 	return run_sort_test(DArray_heapsort, "heapsort");
---
> char *test_heapsort()
> {
>     return run_sort_test(DArray_heapsort, "heapsort");
48,49c62,64
< char *test_mergesort() {
< 	return run_sort_test(DArray_mergesort, "mergesort");
---
> char *test_mergesort()
> {
>     return run_sort_test(DArray_mergesort, "mergesort");
52,56c67,75
< char *all_tests() {
< 	mu_run_test(test_qsort);
< 	mu_run_test(test_heapsort);
< 	mu_run_test(test_mergesort);
< 	return NULL;
---
> char *all_tests()
> {
>     mu_suite_start();
> 
>     mu_run_test(test_qsort);
>     mu_run_test(test_heapsort);
>     mu_run_test(test_mergesort);
> 
>     return NULL;
57a77
> 
